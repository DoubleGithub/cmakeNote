# 0 序
原本计划直接放上第一篇文章——cmake构建系统，但是如果没有一个大致了解，马上就进行系统化的介绍，不仅会增加学习曲线难度，降低大家兴趣，也会破坏整个系列的宗旨——让学习变得简单，实用。

因此，遵循先上手，后探究的宗旨，考虑再三，还是先放一篇tutorial，尝尝鲜，有了大概了解，后面学习起来也能鼓足干劲。

tutorial所涉及的篇幅较大，其会被分为两篇文章进行介绍，以保证在读者高集中精力和碎片化时间内，快速掌握和了解。

# 1 基本语法
cmake通常用来构建（编译、链接、安装、测试）大型软件系统，对于小型软件，也能相应简化操作。cmake实际上是一个类似shell的程序。

通过输入的控制指令，经过解析，再输出文件，生成makeFile。

cmake的控制指令放在名称为CMakeLists.txt的文本文件中，该文件以所在目录为基本单位，一个目录对应一个CMakeLists.txt。

为了比较清楚的介绍，此处采用最简单的文件安排。

现在，我们打算将main.cpp文件编译成main可执行文件。需要进行如下步骤：
> 1 建一个目录，目录名称任意，暂且命名为firstTest。
> 2 将所有的需要的源文件、头文件放入到firstTest中。我们将main.cpp放入到firstTest中。
> 3 在firstTest中，新建一个文本文件，命名为：CMakeLists.txt。文件名不能错。
> 4 在CMakeLists.txt中输入如下控制指令。

```
# 此处是注释
cmake_minimum_required (VERSION 2.6) # 最低版本为2.6。分为三个部分: cmake_minimum_required条件判断指令，VERSION为cmake内置变量，2.6为值
project (Main) # 工程名字
add_executable (main main.cpp) # 生成可执行文件main, 其依赖于main.cpp。
```

# 2 通过cmake生成头文件
程序中的一些变量依赖于编译平台。通常，在使用gcc等编译器时，我们可以通过gcc的参数，在程序外面定义宏。程序利用这些宏，执行不同的动作。

比如，main.cpp中需要输出程序的版本信息，有以下两种方式：
> 1 直接在程序文件中定义版本号，版本号每变一次，都修改源文件。
> 2 main.cpp通过编译器传入的宏，来获得版本号。

显然，第二种方式更灵活，风险更小。下面将介绍，如何利用cmake，通过宏（macro）来向main.cpp中传入变量。

## 1 生成包含版本号的头文件



## 2 main.cpp使用生成的头文件
